import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,e as n,b as l,f as a}from"./app-RnYB9dwR.js";const i={},u=a('<h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>给你一个整数数组 nums 。每一次操作中，你可以将 nums 中 任意 一个元素替换成 任意 整数。<br> 如果 nums 满足以下条件，那么它是 连续的 ：<br> nums 中所有元素都是 <strong>互不相同</strong> 的。<br> nums 中 <strong>最大</strong> 元素与 <strong>最小</strong> 元素的差等于 nums.length - 1 。<br> 比方说，nums = [4, 2, 5, 3] 是 连续的 ，但是 nums = [1, 2, 3, 5, 6] 不是连续的 。<br> 请你返回使 nums 连续 的 最少 操作次数。</p><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例 1：</span></a></h4><blockquote><p>输入：nums = [4,2,5,3]<br> 输出：0<br> 解释：nums 已经是连续的了。</p></blockquote><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2"><span>示例 2：</span></a></h4><blockquote><p>输入：nums = [1,2,3,5,6]<br> 输出：1<br> 解释：一个可能的解是将最后一个元素变为 4。<br> 结果数组为 [1,2,3,5,4] ，是连续数组。</p></blockquote><h2 id="解法" tabindex="-1"><a class="header-anchor" href="#解法"><span>解法</span></a></h2><p>正难则反，可以求以某个数 X 为最小值，到连续最大值的数目，长度减去这个数目就是操作次数，然后枚举 X ，Math.min 最小值，即是答案。</p>',8),r=s("br",null,null,-1),k={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/",target:"_blank",rel:"noopener noreferrer"},m=a(`<blockquote><p>例如 [6,2,3,3,5,1] 排序并删除重复元素后是 [1,2,3,5,6]</p></blockquote><p>然后遍历数组<br> 枚举以当前元素 nums[i] 作为连续数组的最小值<br> 通过二分查找找到第一个大于 nums[i] + n − 1 的位置 j<br> 那么 j − i 就是当前元素作为最小值时，连续数组的长度，更新答案。<br> 即 res = Math.min⁡(res, n − (j − i)) = Math.min(res, n - j + i); 最后返回 res 即可。</p><blockquote><p>以 [6,2,3,3,5,1] 为例, 数组长度 len = 6, 排序删除后为 [1,2,3,5,6]<br> 从 nums[0] 即 1 开始遍历，<br> 因为它是最小值，所以只要在它后边的数组中找到第一个大于 1 + len(6) - 1 的位置 j ,<br> 说明后边的数字都不满足条件，<br> 也就是说满足条件的数字，都在下标 i,j 之间，需要操作的数据即是 len - (j - i)<br> 然后再遍历 nums[1] 即数字 2 作为连续数组最小值，直到遍历到 num[4] 即 6，通过 Math.min 可以求出需要操作的最小值。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minOperations</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">// 排序</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 删除重复元素</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 此时 m 是新数组的最大坐标。</span>

        <span class="token keyword">int</span> res <span class="token operator">=</span> len<span class="token punctuation">;</span>
        <span class="token comment">// 遍历新数组</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 找到第一个大于 num[j] + len - 1 的元素，没有则返回 m</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Math.min 比较得到最小值。</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> len <span class="token operator">-</span> j <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 二分查找</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
                right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> left<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function d(v,b){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("我们先将数组排序，去重, 因为答案和数组顺序无关，所以可以进行排序。"),r,n(" 删除重复元素参考 "),s("a",k,[n("26. 删除有序数组中的重复项"),l(t)])]),m])}const y=e(i,[["render",d],["__file","2024-04-08.html.vue"]]),f=JSON.parse('{"path":"/blog/algorithm/daily/2024-04-08.html","title":"240408-2009使数组连续的最少操作数","lang":"zh-CN","frontmatter":{"title":"240408-2009使数组连续的最少操作数","category":["leetcode"],"order":1,"tag":["二分查找","数组","有序数组去重"],"description":"题目描述 给你一个整数数组 nums 。每一次操作中，你可以将 nums 中 任意 一个元素替换成 任意 整数。 如果 nums 满足以下条件，那么它是 连续的 ： nums 中所有元素都是 互不相同 的。 nums 中 最大 元素与 最小 元素的差等于 nums.length - 1 。 比方说，nums = [4, 2, 5, 3] 是 连续的 ，...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/algorithm/daily/2024-04-08.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"240408-2009使数组连续的最少操作数"}],["meta",{"property":"og:description","content":"题目描述 给你一个整数数组 nums 。每一次操作中，你可以将 nums 中 任意 一个元素替换成 任意 整数。 如果 nums 满足以下条件，那么它是 连续的 ： nums 中所有元素都是 互不相同 的。 nums 中 最大 元素与 最小 元素的差等于 nums.length - 1 。 比方说，nums = [4, 2, 5, 3] 是 连续的 ，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T07:29:43.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"二分查找"}],["meta",{"property":"article:tag","content":"数组"}],["meta",{"property":"article:tag","content":"有序数组去重"}],["meta",{"property":"article:modified_time","content":"2024-04-09T07:29:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"240408-2009使数组连续的最少操作数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-09T07:29:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"解法","slug":"解法","link":"#解法","children":[]}],"git":{"createdTime":1712569852000,"updatedTime":1712647783000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":3}]},"readingTime":{"minutes":2.55,"words":766},"filePathRelative":"blog/algorithm/daily/2024-04-08.md","localizedDate":"2024年4月8日","autoDesc":true}');export{y as comp,f as data};
