import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,f as s}from"./app-kPtiNsGp.js";const t={},p=s(`<h2 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程"><span>并发编程</span></a></h2><h3 id="线程的生命周期" tabindex="-1"><a class="header-anchor" href="#线程的生命周期"><span>线程的生命周期</span></a></h3><h4 id="初始态-new" tabindex="-1"><a class="header-anchor" href="#初始态-new"><span>初始态(new)</span></a></h4><p>刚新建的线程一开始的状态，此时还没有调用 start 方法（new Thread）</p><h4 id="运行态-runnable" tabindex="-1"><a class="header-anchor" href="#运行态-runnable"><span>运行态(runnable)</span></a></h4><p>调用了 start 后等待运行的状态 (start)</p><h4 id="阻塞态-blocked" tabindex="-1"><a class="header-anchor" href="#阻塞态-blocked"><span>阻塞态(blocked)</span></a></h4><p>线程运行被阻塞，需要等待释放锁等 (synchronized, reentrantLock.lock)(reentrantLock.unlock)</p><h4 id="等待态-waiting" tabindex="-1"><a class="header-anchor" href="#等待态-waiting"><span>等待态(waiting)</span></a></h4><p>等待其他线程通知或中断，（Object.wait, Thread.join, LockSupport.park）（Object.notify, Object.notifyAll, join 的线程执行完， LockSupport.unpark ）</p><h4 id="超时等待态-time-waiting" tabindex="-1"><a class="header-anchor" href="#超时等待态-time-waiting"><span>超时等待态(time-waiting)</span></a></h4><p>等待其他线程通知或中断，不过有超时时间（除了进入等待态的方法还有 sleep 方法）</p><h4 id="终止态-terminated" tabindex="-1"><a class="header-anchor" href="#终止态-terminated"><span>终止态(terminated)</span></a></h4><p>线程终止</p><h3 id="如何避免死锁" tabindex="-1"><a class="header-anchor" href="#如何避免死锁"><span>如何避免死锁</span></a></h3><p>破坏请求与保持条件（一次性请求所有条件）<br> 破坏不剥夺条件（如果申请的资源被锁了，则释放自己持有的资源）<br> 破坏循环等待条件（例如两个资源 o1, o2，则多个线程都按照 o1-&gt;o2 的顺序申请资源）</p><h3 id="sleep-和-wait-方法的区别" tabindex="-1"><a class="header-anchor" href="#sleep-和-wait-方法的区别"><span>sleep 和 wait 方法的区别</span></a></h3><p>sleep 和 wait 都是将线程进入等待态<br> 最大的区别就是 sleep 不释放持有的锁， wait 释放锁<br> wait 是对象的方法，sleep 是线程的方法</p><h3 id="jmm" tabindex="-1"><a class="header-anchor" href="#jmm"><span>JMM</span></a></h3><p>cpu有自己的内存模型，例如三级缓存、三级缓存等等。<br> Java 由于跨平台的特性，就自己提供了一套内存模型，就是 JMM。<br> 可以把 JMM 看作是 Java 定义的并发编程的一组规范，抽象了线程和主内存的直接的关系，规定了Java源码到 cup指令的规范，主要是为了简化多线程编程增强可移植性。</p><h3 id="jvm内存区域和-jmm内存模型" tabindex="-1"><a class="header-anchor" href="#jvm内存区域和-jmm内存模型"><span>JVM内存区域和 JMM内存模型</span></a></h3><p>JVM 内存区域定义了 Java 虚拟机在运行的时，分区存储程序数据，比如堆存放对象等。<br> JMM 主要是程序的并发有关，抽象了线程和主内存的关系，比如共享变量必须在主内存中等等，主要是为了简化多线程编程，增强系统可移植性。</p><h3 id="happens-before-原则" tabindex="-1"><a class="header-anchor" href="#happens-before-原则"><span>happens-before 原则</span></a></h3><p>例如: <strong>操作1</strong> happens-before <strong>操作2</strong>，意味着 <strong>操作1</strong> 的结果对 <strong>操作2</strong> 是可见的。即使 <strong>操作1</strong> 和 <strong>操作2</strong> 不在一个线程中，JMM也会保证 <strong>操作1</strong> 的结果也对 <strong>操作2</strong> 可见。</p><h4 id="happens-before-的一些规则" tabindex="-1"><a class="header-anchor" href="#happens-before-的一些规则"><span>happens-before 的一些规则</span></a></h4><ol><li>程序顺序规则，线程按照书写顺序执行</li><li>结锁规则，结锁 happens-before 于 加锁</li><li>volatile 变量规则，volatile 变量的写操作 happens-before 与所有的读操作</li><li>传递规则 A happens-before B, B happens-before C， 那么 A happens-before C</li><li>线程启动规则 线程的 start happens-before 线程的所有的动作。</li></ol><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>Volatile</span></a></h3><p>volatile 写操作 happens-before 所有的读操作，保证变量的可见性<br> volatile 还可以防止指令重排，使用 Unsafe 的 内存屏障实现。</p><h3 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>Synchronized</span></a></h3><ul><li>修饰实例方法锁当前对象</li><li>修饰静态方法锁类对象</li><li>修饰方法块自定义锁的内容</li><li>它是一个非公平锁。</li></ul><h4 id="底层原理" tabindex="-1"><a class="header-anchor" href="#底层原理"><span>底层原理</span></a></h4><p>锁语句块，编译的代码加上 monitorenter/monitorexit 指令，<br> 当执行到 monitorenter 代码的时候会尝试过去 moniter 的持有权，每个对象都内置了一个基于 C++实现的 ObjectMonitor ，<br> 获取到锁的线程执行代码，执行完通过 monitorexit 执行释放 moniter 的持有权。</p><p>锁方法，在方法上加 ACC_synchronized 标识，来执行同步操作。</p><p>锁定对象的markword头信息记录锁的状态，无-偏-轻-重，只有重量级锁 markword 才会指向 moniter 对象地址。</p><p>JDK1.5 去掉了偏向锁，当一个线程来获取锁的时候会将锁定对象设置为偏向锁，如果有两个线程来竞争会升级为轻量级锁，如果一个线程持有锁另一个线程自旋超过一定次数或者有第三个线程来竞争，就会升级为重量级锁。 升级为重量级锁后才会竞争 monitor 对象，此时锁定的对象的 markword 头里存储的是 monitor 对象的地址。</p><p>优化<br> 1.6之后，Synchronized 进行了大量的优化，增加了，自旋锁，自适应自旋锁，锁消除，锁粗化，偏向锁，轻量级锁等来减少锁开销。<br> 锁升级，无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁，只可升级不可降级。</p><h3 id="公平锁和非公平锁" tabindex="-1"><a class="header-anchor" href="#公平锁和非公平锁"><span>公平锁和非公平锁</span></a></h3><p>公平锁让先申请的线程先得到锁（排队比较公平）。 非公平锁，不保证先申请的线程得到锁。</p><h3 id="中断" tabindex="-1"><a class="header-anchor" href="#中断"><span>中断</span></a></h3><p>Thread.interrupt 给线程发送中断信号 Thread.isInterrupted 判断是否被中断 Thread.interrupted 响应中断，清除中断标记</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 响应中断</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程被中断，程序退出。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程休眠被中断，程序退出。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span>ThreadLocal</span></a></h3><p>ThreadLoal 定义了一个 ThreadLocalMap 每个 Thread 对象内部都有个一个 ThreadLocalMap 对象，<br> 该对象的key是定义的 ThreadLocal 对象，value 则是通过 ThreadLocal set\\get 的值，也就是说其实就是每个线程内都有一个Map对象，<br> 该对象存储了定义的 threadLocal 对象和设置的值，就能保持每个线程的值不一样了。</p><p>ThreadLocalMap 的key 是弱引用，当没有变量指向 ThreadLocal 对象的时候发生GC，若引用将会被回收，此时 key = null, val != null 就发生了内存泄漏。<br> 如果使用线程池，则线程方法退出时候，在finally 方法中一定要调用一次 remove，防止脏数据。</p><h3 id="线程池" tabindex="-1"><a class="header-anchor" href="#线程池"><span>线程池</span></a></h3><h4 id="创建线程池" tabindex="-1"><a class="header-anchor" href="#创建线程池"><span>创建线程池</span></a></h4><p>通过 ThreadPoolExecutor 来创建线程池</p><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><p>coreSize maxSize threadFactory, 等待队列，拒绝策略，回收时间/单位（当最大线程数大于核心线程数时的回收时间）</p><h4 id="提供的拒绝策略" tabindex="-1"><a class="header-anchor" href="#提供的拒绝策略"><span>提供的拒绝策略</span></a></h4><ol><li>抛出异常，</li><li>使用提交线程2的线程1直接执行线程2。</li><li>直接拒绝</li><li>丢弃最早提交的未执行线程</li></ol><h3 id="future-completablefuture" tabindex="-1"><a class="header-anchor" href="#future-completablefuture"><span>Future &amp; CompletableFuture</span></a></h3><h3 id="aqs" tabindex="-1"><a class="header-anchor" href="#aqs"><span>AQS</span></a></h3><p>抽象队列同步器<br> 它是锁的基础，内部维护了一个 volatile 的变量 state，和一个 CLH 队列，队列里线程信息，线程 waitSatus, 前驱节点，后继节点。<br> 例如信号量（semaphore(5)）就是把 state 设置成5，多个线程申请的时候通过 CAS 来进行减少，减到0则不可再减少。<br> CountDownLatch 同理</p>`,54),o=[p];function l(r,i){return n(),e("div",null,o)}const d=a(t,[["render",l],["__file","java-concurrent.html.vue"]]),h=JSON.parse('{"path":"/blog/java/java-concurrent.html","title":"Java并发","lang":"zh-CN","frontmatter":{"title":"Java并发","category":["Java"],"order":5,"tag":["Java基础","Java-concurrent"],"description":"并发编程 线程的生命周期 初始态(new) 刚新建的线程一开始的状态，此时还没有调用 start 方法（new Thread） 运行态(runnable) 调用了 start 后等待运行的状态 (start) 阻塞态(blocked) 线程运行被阻塞，需要等待释放锁等 (synchronized, reentrantLock.lock)(reentra...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/java/java-concurrent.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"Java并发"}],["meta",{"property":"og:description","content":"并发编程 线程的生命周期 初始态(new) 刚新建的线程一开始的状态，此时还没有调用 start 方法（new Thread） 运行态(runnable) 调用了 start 后等待运行的状态 (start) 阻塞态(blocked) 线程运行被阻塞，需要等待释放锁等 (synchronized, reentrantLock.lock)(reentra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-08T06:04:53.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:tag","content":"Java-concurrent"}],["meta",{"property":"article:modified_time","content":"2024-04-08T06:04:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java并发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-08T06:04:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":2,"title":"并发编程","slug":"并发编程","link":"#并发编程","children":[{"level":3,"title":"线程的生命周期","slug":"线程的生命周期","link":"#线程的生命周期","children":[]},{"level":3,"title":"如何避免死锁","slug":"如何避免死锁","link":"#如何避免死锁","children":[]},{"level":3,"title":"sleep 和 wait 方法的区别","slug":"sleep-和-wait-方法的区别","link":"#sleep-和-wait-方法的区别","children":[]},{"level":3,"title":"JMM","slug":"jmm","link":"#jmm","children":[]},{"level":3,"title":"JVM内存区域和 JMM内存模型","slug":"jvm内存区域和-jmm内存模型","link":"#jvm内存区域和-jmm内存模型","children":[]},{"level":3,"title":"happens-before 原则","slug":"happens-before-原则","link":"#happens-before-原则","children":[]},{"level":3,"title":"Volatile","slug":"volatile","link":"#volatile","children":[]},{"level":3,"title":"Synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":3,"title":"公平锁和非公平锁","slug":"公平锁和非公平锁","link":"#公平锁和非公平锁","children":[]},{"level":3,"title":"中断","slug":"中断","link":"#中断","children":[]},{"level":3,"title":"ThreadLocal","slug":"threadlocal","link":"#threadlocal","children":[]},{"level":3,"title":"线程池","slug":"线程池","link":"#线程池","children":[]},{"level":3,"title":"Future & CompletableFuture","slug":"future-completablefuture","link":"#future-completablefuture","children":[]},{"level":3,"title":"AQS","slug":"aqs","link":"#aqs","children":[]}]}],"git":{"createdTime":1712556293000,"updatedTime":1712556293000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":1}]},"readingTime":{"minutes":5.34,"words":1602},"filePathRelative":"blog/java/java-concurrent.md","localizedDate":"2024年4月8日","autoDesc":true}');export{d as comp,h as data};
