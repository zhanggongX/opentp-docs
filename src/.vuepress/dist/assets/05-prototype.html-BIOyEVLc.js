import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-C2FF4-yj.js";const t={},p=e(`<h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍：</span></a></h3><p>原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。</p><p>原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。</p><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/** Prototype Class **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cookie</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//In an actual implementation of this pattern you would now attach references to</span>
        <span class="token comment">//the expensive to produce parts from the copies that are held inside the prototype.</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
 <span class="token doc-comment comment">/** Concrete Prototypes to clone **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoconutCookie</span> <span class="token keyword">extends</span> <span class="token class-name">Cookie</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
 
 <span class="token doc-comment comment">/** Client Class**/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieMachine</span><span class="token punctuation">{</span>
 
   <span class="token keyword">private</span> <span class="token class-name">Cookie</span> cookie<span class="token punctuation">;</span><span class="token comment">//cookie必须是可复制的</span>
 
     <span class="token keyword">public</span> <span class="token class-name">CookieMachine</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
         <span class="token keyword">this</span><span class="token punctuation">.</span>cookie <span class="token operator">=</span> cookie<span class="token punctuation">;</span> 
     <span class="token punctuation">}</span> 

    <span class="token keyword">public</span> <span class="token class-name">Cookie</span> <span class="token function">makeCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span><span class="token punctuation">)</span> cookie<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 

 
     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
         <span class="token class-name">Cookie</span> tempCookie <span class="token operator">=</span>  <span class="token keyword">null</span><span class="token punctuation">;</span> 
         <span class="token class-name">Cookie</span> prot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoconutCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token class-name">CookieMachine</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieMachine</span><span class="token punctuation">(</span>prot<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置原型</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
             tempCookie <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">makeCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过复制原型返回多个cookie </span>
     <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","05-prototype.html.vue"]]),d=JSON.parse('{"path":"/blog/compute/design-pattern/05-prototype.html","title":"原型模式","lang":"zh-CN","frontmatter":{"title":"原型模式","category":["设计模式"],"order":5,"tag":["原型模式"],"description":"介绍： 原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。 原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。 代码实现","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/compute/design-pattern/05-prototype.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"介绍： 原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称的“原型”，这个原型是可定制的。 原型模式多用于创建复杂的或者耗时的实例，因为这种情况下，复制一个已经存在的实例使程序运行更高效；或者创建值相等，只是命名不一样的同类数据。 代码实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"原型模式"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":3,"title":"介绍：","slug":"介绍","link":"#介绍","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":0.98,"words":293},"filePathRelative":"blog/compute/design-pattern/05-prototype.md","autoDesc":true}');export{r as comp,d as data};
