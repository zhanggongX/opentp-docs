import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as r,e as a,a as t}from"./app-DrM8QV3P.js";const l={},d=a('<h3 id="一-jps-虚拟机进程情况" tabindex="-1"><a class="header-anchor" href="#一-jps-虚拟机进程情况"><span>一，jps 虚拟机进程情况</span></a></h3><p>jps<br> java process status<br> -lvm<br> l 主类全名带进程号，<br> m 启动时给主类的参数，<br> v 进程启动时JVM参数</p><h3 id="二-jstat-虚拟机统计信息监视工具" tabindex="-1"><a class="header-anchor" href="#二-jstat-虚拟机统计信息监视工具"><span>二，jstat 虚拟机统计信息监视工具</span></a></h3><p>jstat -[options] pid<br> jvm statistics monitoring tool</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-class</td><td>类装载卸载数量，总空间以及类装载耗时</td></tr><tr><td>-gc</td><td>堆情况</td></tr><tr><td>-gccapacity vmid</td><td>和 gc基本一致，主要关注java堆各个区域用到的最大值最小值</td></tr><tr><td>-gcutil vmid</td><td>和 gc基本一致，主要关注已使用空间占比</td></tr><tr><td>-gccause vmid</td><td>和 gcutil 基本一致，会额外输出上次gc的原因</td></tr><tr><td>-gcnew vmid</td><td>新生代 gc 情况</td></tr><tr><td>-gcnewcapacity vmid</td><td>和 gcnew 基本一致，主要关注使用到的最小最大空间</td></tr><tr><td>-gcold vmid</td><td>监视老年代GC情况</td></tr><tr><td>-gcoldcapacity vmid</td><td>和gcold基本一致，主要关注使用最大最小空间</td></tr><tr><td>-gcpermcapacity vmid</td><td>输出永久代使用的最大最小空间</td></tr><tr><td>-compiler vmid 输出JIT</td><td>编译器编译过的方法，耗时等信息</td></tr><tr><td>-printcompilation vmid</td><td>输出已经被JIT编译过的方法</td></tr></tbody></table><blockquote><p>比如 jstat -gc -h3 31736 1000 10表示分析进程 id 为 31736 的 gc 情况，每隔 1000ms 打印一次记录，打印 10 次停止，每 3 行后打印指标头部。</p></blockquote><h3 id="三-jinfo-虚拟机配置信息工具-实时查看和调整虚拟机各项参数" tabindex="-1"><a class="header-anchor" href="#三-jinfo-虚拟机配置信息工具-实时查看和调整虚拟机各项参数"><span>三，jinfo 虚拟机配置信息工具-实时查看和调整虚拟机各项参数</span></a></h3><p>jinfo<br> configuration info for java</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-flag name</td><td>to print the value of the named VM flag</td></tr><tr><td>-flag [+/-] name</td><td>to enable or disable the named VM flag（设置虚拟机参数）</td></tr><tr><td>-flag name=value</td><td>to set the named VM flag to the given value（设置虚拟机参数）</td></tr><tr><td>-flags</td><td>to print VM flags</td></tr><tr><td>-sysprops</td><td>to print Java system properties</td></tr><tr><td><strong>no option</strong></td><td>to print both of the above</td></tr></tbody></table><blockquote><p>比如 jinfo -flag PrintGC 17340</p></blockquote><h3 id="四-jmap-虚拟机内存映像工具" tabindex="-1"><a class="header-anchor" href="#四-jmap-虚拟机内存映像工具"><span>四，jmap 虚拟机内存映像工具</span></a></h3><p>jmap<br> memory map for java<br> -dump:/[live,] format=b, file=&#39;&lt;&#39;filename&#39;&gt;&#39; lvmid</p><blockquote><p>example: jmap -dump:live,format=b,file=test.bin 1123 live 表示只导出存活的对象</p></blockquote><p>-finalizerinfo</p><blockquote><p>example： jmap -finalizerinfo 1123 F-Queue中等待执行 finalize方法的对象</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-heap</td><td>显示虚拟机的堆信息</td></tr><tr><td>-histo</td><td>显示堆中对象信息，类，实例数量，合计容量</td></tr><tr><td>-clstats</td><td>以classloader 为统计口径显示类信息</td></tr><tr><td>-F</td><td>dump失效的时候，强制生成内存快照</td></tr></tbody></table>',16),i=t("blockquote",{PID:""},[t("p",null,"Dump出内存， jmap -dump:format=b,file=/opt/dump/test.dump")],-1),n=a('<h3 id="五-虚拟机快照解析工具" tabindex="-1"><a class="header-anchor" href="#五-虚拟机快照解析工具"><span>五，虚拟机快照解析工具</span></a></h3><p>jhat<br> jvm heap analysis tool<br> jhap jmap出来的文件，建议使用 VisualVM 或者 JProfile<br> 访问解析结果，是IP:7000/</p><blockquote><p>比如 jhat C:\\Users\\SnailClimb\\Desktop\\heap.hprof</p></blockquote><h3 id="六-虚拟机堆栈跟踪工具" tabindex="-1"><a class="header-anchor" href="#六-虚拟机堆栈跟踪工具"><span>六，虚拟机堆栈跟踪工具</span></a></h3><p>jstack [option] vmid<br> -F 强制<br> -l 除堆栈外，展示锁的附加信息<br> -m 如果调用本地方法，可以展示c/c++的堆栈</p><h3 id="七-jit生成代码反汇编" tabindex="-1"><a class="header-anchor" href="#七-jit生成代码反汇编"><span>七，JIT生成代码反汇编</span></a></h3><p>HSDIS<br> 经典的吞吐量优先的jvm配置<br> -Xmx3550m -Xms3550m -Xmn2g -Xss128k -XX:+UseParallelGC-XX:ParallelGCThreads=20 -XX:+UseParallelOldGC -XX:MaxGCPauseMillis=100 -XX:+UseAdaptiveSizePolicy<br> 堆大小 3550MB， 新生代 2g。 栈 128k。 新声代使用 UseParallelGC，并发GC线程数20，-XX:+UseParallelOldGC 老年代使用并发收集器。</p><p>设置每次年轻代垃圾回收的最长时间为100 ms。 -xx:+UseAdaptiveSizePolicy<br> 设置此选项后，并行收集器自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低响应时该间或者收集频率，该值建议使用并行收集器时，并且一直打开。</p><p>经典的响应优先的jvm配置 -Xms4g -Xmx4g -Xmn2g -Xss1024K -XX:MetaspaceSize=128M<br> -XX:ParallelGCThreads=20 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC<br> -XX:+UseCMSCompactAtFullCollectionXX:+UseCMSCompactAtFullCollection=5 -XX:CMSInitiatingOccupancyFraction=80</p><p>堆大小4g，新声代2g，栈大小1MB，元空间大小128MB，并发收集线程数20个，<br> 老年代使用cms收集器，新生代使用 parNew 收集器，<br> UseCMSCompactAtFullCollection 打开对老年代的压缩，<br> UseCMSCompactAtFullCollection=5，fullgc 5次 后进行空间压缩，<br> CMSInitiatingOccupancyFraction=80，老年代达到80% 触发GC</p>',10),s=[d,i,n];function p(c,m){return o(),r("div",null,s)}const j=e(l,[["render",p],["__file","java-jvm-tool.html.vue"]]),v=JSON.parse('{"path":"/blog/java/java-jvm-tool.html","title":"JVM工具详解","lang":"zh-CN","frontmatter":{"title":"JVM工具详解","category":["Java"],"order":7,"tag":["Java基础","Java-JVM"],"description":"一，jps 虚拟机进程情况 jps java process status -lvm l 主类全名带进程号， m 启动时给主类的参数， v 进程启动时JVM参数 二，jstat 虚拟机统计信息监视工具 jstat -[options] pid jvm statistics monitoring tool 比如 jstat -gc -h3 31736 1...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/java/java-jvm-tool.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"JVM工具详解"}],["meta",{"property":"og:description","content":"一，jps 虚拟机进程情况 jps java process status -lvm l 主类全名带进程号， m 启动时给主类的参数， v 进程启动时JVM参数 二，jstat 虚拟机统计信息监视工具 jstat -[options] pid jvm statistics monitoring tool 比如 jstat -gc -h3 31736 1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T07:34:16.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:tag","content":"Java-JVM"}],["meta",{"property":"article:modified_time","content":"2024-04-09T07:34:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM工具详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-09T07:34:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":3,"title":"一，jps 虚拟机进程情况","slug":"一-jps-虚拟机进程情况","link":"#一-jps-虚拟机进程情况","children":[]},{"level":3,"title":"二，jstat 虚拟机统计信息监视工具","slug":"二-jstat-虚拟机统计信息监视工具","link":"#二-jstat-虚拟机统计信息监视工具","children":[]},{"level":3,"title":"三，jinfo 虚拟机配置信息工具-实时查看和调整虚拟机各项参数","slug":"三-jinfo-虚拟机配置信息工具-实时查看和调整虚拟机各项参数","link":"#三-jinfo-虚拟机配置信息工具-实时查看和调整虚拟机各项参数","children":[]},{"level":3,"title":"四，jmap 虚拟机内存映像工具","slug":"四-jmap-虚拟机内存映像工具","link":"#四-jmap-虚拟机内存映像工具","children":[]},{"level":3,"title":"五，虚拟机快照解析工具","slug":"五-虚拟机快照解析工具","link":"#五-虚拟机快照解析工具","children":[]},{"level":3,"title":"六，虚拟机堆栈跟踪工具","slug":"六-虚拟机堆栈跟踪工具","link":"#六-虚拟机堆栈跟踪工具","children":[]},{"level":3,"title":"七，JIT生成代码反汇编","slug":"七-jit生成代码反汇编","link":"#七-jit生成代码反汇编","children":[]}],"git":{"createdTime":1712647783000,"updatedTime":1712648056000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":2}]},"readingTime":{"minutes":3.11,"words":932},"filePathRelative":"blog/java/java-jvm-tool.md","localizedDate":"2024年4月9日","autoDesc":true}');export{j as comp,v as data};
