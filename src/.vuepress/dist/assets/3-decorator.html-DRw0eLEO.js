import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-B868GSZd.js";const e="/assets/decorator-C59uO2HI.png",p={},o=t('<h2 id="装饰模式" tabindex="-1"><a class="header-anchor" href="#装饰模式"><span>装饰模式</span></a></h2><p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。<br> 装饰模式是为已有功能动态地添加更多功能的一种方式。<br> 当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或主要行为。<br> 而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。<br> 而装饰模式却提供了一个非常好的解决方案，它把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，因此，当需要执行特殊行为时，客户代码就可以在运行时根 据需要有选择地、按顺序地使用装饰功能包装对象了。<br> 装饰模式的优点是，把类中的装饰功能从类中搬移去除，这样可以简化原有的类。</p><blockquote><p>装饰模式和建造者模式的区别<br> 建造者模式是固定的，要建造哪些属性都是固定的，比如构造一个人，一个头一个身体四条腿，都是固定的，而装饰着模式就像是穿衣服，可以穿外套，鞋子，袜子，也可以什么都不穿，对于类的稳定性没有要求，只不过通过不同的装饰产生不同的组合效果。</p></blockquote><p><strong>说了一大堆，其实装饰模式就是我们有一个 ClassA, 创建了一个装饰类ClassB，用来包装原有的类ClassA，并在保持类方法签名完整性的前提下，提供了额外的功能</strong></p><h3 id="装饰模式uml" tabindex="-1"><a class="header-anchor" href="#装饰模式uml"><span>装饰模式UML</span></a></h3><figure><img src="'+e+`" alt="装饰类UML,图例来自《大话设计模式》" tabindex="0" loading="lazy"><figcaption>装饰类UML,图例来自《大话设计模式》</figcaption></figure><h3 id="装饰模式代码示例" tabindex="-1"><a class="header-anchor" href="#装饰模式代码示例"><span>装饰模式代码示例</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 原始类</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>
   <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token keyword">implements</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;class a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token keyword">implements</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;class b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 装饰类</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">implements</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>
   <span class="token keyword">protected</span> <span class="token class-name">Inter</span> decoratedInter<span class="token punctuation">;</span>
 
   <span class="token keyword">public</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token class-name">Inter</span> decoratedInter<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>decoratedInter <span class="token operator">=</span> decoratedInter<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      decoratedInter<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorA</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">public</span> <span class="token class-name">DecoratorA</span><span class="token punctuation">(</span><span class="token class-name">Inter</span> inter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>inter<span class="token punctuation">)</span><span class="token punctuation">;</span>     
   <span class="token punctuation">}</span>
 
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      decoratedInter<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         
      <span class="token function">doSomeDecorator</span><span class="token punctuation">(</span>decoratedInter<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 
  <span class="token comment">// 装饰类有原始类对象，就可以做一些增强。</span>
   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSomeDecorator</span><span class="token punctuation">(</span><span class="token class-name">Inter</span> decoratedInter<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;do some decorator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),c=[o];function i(l,u){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","3-decorator.html.vue"]]),m=JSON.parse('{"path":"/blog/compute/design-pattern/structure/3-decorator.html","title":"装饰模式","lang":"zh-CN","frontmatter":{"title":"装饰模式","category":["设计模式"],"order":3,"tag":["装饰模式","结构型设计模式"],"description":"装饰模式 动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。 装饰模式是为已有功能动态地添加更多功能的一种方式。 当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或主要行为。 而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。 而装饰模式却提供了一个非常...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/compute/design-pattern/structure/3-decorator.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"装饰模式"}],["meta",{"property":"og:description","content":"装饰模式 动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。 装饰模式是为已有功能动态地添加更多功能的一种方式。 当系统需要新功能的时候，是向旧的类中添加新的代码。这些新加的代码通常装饰了原有类的核心职责或主要行为。 而这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。 而装饰模式却提供了一个非常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-17T11:08:40.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"装饰模式"}],["meta",{"property":"article:tag","content":"结构型设计模式"}],["meta",{"property":"article:modified_time","content":"2024-04-17T11:08:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"装饰模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-17T11:08:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":2,"title":"装饰模式","slug":"装饰模式","link":"#装饰模式","children":[{"level":3,"title":"装饰模式UML","slug":"装饰模式uml","link":"#装饰模式uml","children":[]},{"level":3,"title":"装饰模式代码示例","slug":"装饰模式代码示例","link":"#装饰模式代码示例","children":[]}]}],"git":{"createdTime":1713352120000,"updatedTime":1713352120000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":1}]},"readingTime":{"minutes":2.04,"words":612},"filePathRelative":"blog/compute/design-pattern/structure/3-decorator.md","localizedDate":"2024年4月17日","autoDesc":true}');export{k as comp,m as data};
