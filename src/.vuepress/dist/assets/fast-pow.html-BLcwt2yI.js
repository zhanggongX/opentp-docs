import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as l,a as n,f as s,b as e,e as c}from"./app-DrM8QV3P.js";const i={},u=c(`<p>快速幂，也叫二进制取幂、平方法</p><blockquote><p>ps：本文章的例子都是求 a<sup>n</sup> 次方</p></blockquote><h2 id="常规幂运算" tabindex="-1"><a class="header-anchor" href="#常规幂运算"><span>常规幂运算</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">long</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环 * a</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res <span class="token operator">*=</span> a<span class="token punctuation">;</span>
        n<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存在的问题" tabindex="-1"><a class="header-anchor" href="#存在的问题"><span>存在的问题：</span></a></h3><p>n的值比较大的时候比较慢，耗时 O(n);<br> 可以使用快速幂来解决</p><h2 id="快速幂" tabindex="-1"><a class="header-anchor" href="#快速幂"><span>快速幂</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">fastPow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> ans <span class="token operator">*</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用快速幂可以将计算幂等的时间复杂度降为 O(log n)</p><h3 id="快速幂数学原理" tabindex="-1"><a class="header-anchor" href="#快速幂数学原理"><span>快速幂数学原理</span></a></h3><p>如果 n = x + y 则 a<sup>n</sup> = a<sup>x+y</sup> = a<sup>x</sup> * a<sup>y</sup><br> 例如：2<sup>13</sup> = 2<sup>1101</sup> = 2<sup>8</sup> * 2<sup>4</sup> * 2<sup>1</sup>;</p><blockquote><p>(13 的二进制 1101，所以 13 的和是 1000 + 0100 + 0001)</p></blockquote><p>快速幂就是利用了这个数学原理<br> n 一共有 log<sub>2</sub>n + 1 位，所以我们计算 a<sup>n</sup> 只需要计算 a<sup>1</sup>，a<sup>2</sup>，a<sup>4</sup>，....，a<sup>log</sup><sub>2</sub><sup>n</sup> 然后再把他们中 n 的相应的二进制为为1 的数相乘即可。<br> 总耗时 O(log n)<br> 就像 2<sup>13</sup>, 普通乘法计算快速幂需要相乘13次，而快速幂只需要 2<sup>8</sup> * 2<sup>4</sup> *（不乘2<sup>2</sup>） * 2<sup>1</sup>， 即 256 * 16 * (不乘4) * 2 一共循环4次即可。</p><blockquote><p>因为13 = 1101，第2位为0，所以不需要乘以 2<sup>2</sup>。</p></blockquote><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><p>1，遍历n的所有位，逻辑代码为</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 当前位是1</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">// 当前位是 0</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 向右移位</span>
    n <span class="token operator">=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2，遍历所有位的时候，记录当前位的值，例如计算 a<sup>n</sup> 我们需要记录 a<sup>1</sup> a<sup>2</sup> a<sup>4</sup>... 的数值，但是只将 n 中二进制值为 1 的 a<sup>x</sup> 值乘到结果值中，所以代码就是这样的。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">fastPow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 迭代，每次n向右位移1位</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前位为1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 则把 a的x次方 值记录到结果中。</span>
            ans <span class="token operator">=</span> ans <span class="token operator">*</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 每次循环都乘以a， 就是 a的1次方 a的2次方 a的4次方。</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="版本迭代" tabindex="-1"><a class="header-anchor" href="#版本迭代"><span>版本迭代</span></a></h3><p>如果数据较大需要取模，则加入mod值即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">qpow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> <span class="token keyword">long</span> mod<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans <span class="token operator">=</span> ans <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),r=n("br",null,null,-1),d={href:"https://leetcode.cn/problems/minimum-non-zero-product-of-the-array-elements/",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),m={href:"https://leetcode.cn/problems/count-ways-to-group-overlapping-ranges/",target:"_blank",rel:"noopener noreferrer"};function v(b,g){const a=t("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("用到快速幂的 leetcode 题："),r,n("a",d,[s("1969. 数组元素的最小非零乘积"),e(a)]),s("。"),k,n("a",m,[s("2580. 统计将重叠区间合并成组的方案数"),e(a)])])])}const w=p(i,[["render",v],["__file","fast-pow.html.vue"]]),f=JSON.parse('{"path":"/blog/algorithm/fast-pow.html","title":"快速幂","lang":"zh-CN","frontmatter":{"title":"快速幂","category":["算法"],"order":2,"tag":["算法"],"description":"快速幂，也叫二进制取幂、平方法 ps：本文章的例子都是求 an 次方 常规幂运算 存在的问题： n的值比较大的时候比较慢，耗时 O(n); 可以使用快速幂来解决 快速幂 使用快速幂可以将计算幂等的时间复杂度降为 O(log n) 快速幂数学原理 如果 n = x + y 则 an = ax+y = ax * ay 例如：213 = 21101 = 28...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://opentp.cn/en/blog/algorithm/fast-pow.html"}],["meta",{"property":"og:url","content":"https://opentp.cn/blog/algorithm/fast-pow.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"快速幂"}],["meta",{"property":"og:description","content":"快速幂，也叫二进制取幂、平方法 ps：本文章的例子都是求 an 次方 常规幂运算 存在的问题： n的值比较大的时候比较慢，耗时 O(n); 可以使用快速幂来解决 快速幂 使用快速幂可以将计算幂等的时间复杂度降为 O(log n) 快速幂数学原理 如果 n = x + y 则 an = ax+y = ax * ay 例如：213 = 21101 = 28..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-04T13:53:45.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"算法"}],["meta",{"property":"article:modified_time","content":"2024-04-04T13:53:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速幂\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-04T13:53:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":2,"title":"常规幂运算","slug":"常规幂运算","link":"#常规幂运算","children":[{"level":3,"title":"存在的问题：","slug":"存在的问题","link":"#存在的问题","children":[]}]},{"level":2,"title":"快速幂","slug":"快速幂","link":"#快速幂","children":[{"level":3,"title":"快速幂数学原理","slug":"快速幂数学原理","link":"#快速幂数学原理","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":3,"title":"版本迭代","slug":"版本迭代","link":"#版本迭代","children":[]}]}],"git":{"createdTime":1712059170000,"updatedTime":1712238825000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":7},{"name":"zhanggong","email":"18523019@qq.com","commits":1}]},"readingTime":{"minutes":2.18,"words":655},"filePathRelative":"blog/algorithm/fast-pow.md","localizedDate":"2024年4月2日","autoDesc":true}');export{w as comp,f as data};
