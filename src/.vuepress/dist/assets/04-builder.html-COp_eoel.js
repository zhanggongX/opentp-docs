import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-BPft6X5f.js";const t={},p=e(`<h3 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途</span></a></h3><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示的意图时，我们需要应用于一个设计模式，建造者(Builder)模式。<br> 建造者模式可以将一个产品的内部表象与产品的生成过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。<br> 如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需知道了。</p><blockquote><p>举个例子：我们需要构造一个人，如果直接创建比较复杂，又要创建瘦人、胖人、高人、矮人，统统通过 new Bean 的方式去创建，那业务对象需要注意的比较多。<br> 如果是用构建者模式，我们为人类创建一个 Builder 类，把需要定义的内容都固定好，生成的时候，如果发现某些内容没有添加，就不允许 build()，就完全避免了出错的情况。<br> 建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABCDE</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> a<span class="token punctuation">;</span><span class="token comment">//必须</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> b<span class="token punctuation">;</span><span class="token comment">//必须</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//可选</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> d<span class="token punctuation">;</span><span class="token comment">//可选</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> e<span class="token punctuation">;</span><span class="token comment">//可选</span>

    <span class="token keyword">private</span> <span class="token function">ABCDE</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>builder<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>builder<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token operator">=</span>builder<span class="token punctuation">.</span>c<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token operator">=</span>builder<span class="token punctuation">.</span>d<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">=</span>builder<span class="token punctuation">.</span>e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> a<span class="token punctuation">;</span><span class="token comment">//必须</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> b<span class="token punctuation">;</span><span class="token comment">//必须</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//可选</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> d<span class="token punctuation">;</span><span class="token comment">//可选</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> e<span class="token punctuation">;</span><span class="token comment">//可选</span>

        <span class="token comment">// 控制必须传入。</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setUsbCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setKeyboard</span><span class="token punctuation">(</span><span class="token class-name">String</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setDisplay</span><span class="token punctuation">(</span><span class="token class-name">String</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">ABCDE</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ABCDE</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","04-builder.html.vue"]]),d=JSON.parse('{"path":"/blog/compute/design-pattern/create/04-builder.html","title":"建造者模式","lang":"zh-CN","frontmatter":{"title":"建造者模式","category":["设计模式"],"order":4,"tag":["构建模式","创建型设计模式"],"description":"用途 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示的意图时，我们需要应用于一个设计模式，建造者(Builder)模式。 建造者模式可以将一个产品的内部表象与产品的生成过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。 如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到它们，而具体建造的过程...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/compute/design-pattern/create/04-builder.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"建造者模式"}],["meta",{"property":"og:description","content":"用途 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示的意图时，我们需要应用于一个设计模式，建造者(Builder)模式。 建造者模式可以将一个产品的内部表象与产品的生成过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。 如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到它们，而具体建造的过程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T06:52:35.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"构建模式"}],["meta",{"property":"article:tag","content":"创建型设计模式"}],["meta",{"property":"article:modified_time","content":"2024-04-16T06:52:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-16T06:52:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":3,"title":"用途","slug":"用途","link":"#用途","children":[]}],"git":{"createdTime":1713250355000,"updatedTime":1713250355000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":1}]},"readingTime":{"minutes":1.67,"words":500},"filePathRelative":"blog/compute/design-pattern/create/04-builder.md","localizedDate":"2024年4月16日","autoDesc":true}');export{k as comp,d as data};
