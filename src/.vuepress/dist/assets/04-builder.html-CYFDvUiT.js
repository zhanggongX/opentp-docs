import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-C83zSR47.js";const t={},p=e(`<h3 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途</span></a></h3><p>当一个类的构造函数参数比较多，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。</p><ol><li>折叠构造函数模式，ClassA(a) Class(B) Class(A,B) Class(A, B, C);</li><li>Bean Getter/Setter 方式。</li></ol><p>缺点：<br> 第一种需要去确认构造方法。<br> 第二种使用者需要调用一堆Set方法。</p><p>建造者模式就可以解决这两种问题。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABCDE</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> a<span class="token punctuation">;</span><span class="token comment">//必须</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> b<span class="token punctuation">;</span><span class="token comment">//必须</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//可选</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> d<span class="token punctuation">;</span><span class="token comment">//可选</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> e<span class="token punctuation">;</span><span class="token comment">//可选</span>

    <span class="token keyword">private</span> <span class="token function">ABCDE</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>builder<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>builder<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token operator">=</span>builder<span class="token punctuation">.</span>c<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token operator">=</span>builder<span class="token punctuation">.</span>d<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>e<span class="token operator">=</span>builder<span class="token punctuation">.</span>e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> a<span class="token punctuation">;</span><span class="token comment">//必须</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> b<span class="token punctuation">;</span><span class="token comment">//必须</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token comment">//可选</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> d<span class="token punctuation">;</span><span class="token comment">//可选</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> e<span class="token punctuation">;</span><span class="token comment">//可选</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token operator">=</span>a<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token operator">=</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setUsbCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setKeyboard</span><span class="token punctuation">(</span><span class="token class-name">String</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">setDisplay</span><span class="token punctuation">(</span><span class="token class-name">String</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>e <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token class-name">ABCDE</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ABCDE</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","04-builder.html.vue"]]),d=JSON.parse('{"path":"/blog/compute/design-pattern/04-builder.html","title":"建造者模式","lang":"zh-CN","frontmatter":{"title":"建造者模式","category":["设计模式"],"order":4,"tag":["构建模式"],"description":"用途 当一个类的构造函数参数比较多，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。 折叠构造函数模式，ClassA(a) Class(B) Class(A,B) Class(A, B, C); Bean Getter/Setter 方式。 缺点： 第一种需要去确认构造方法。 第二种使用者需要调用一堆Set方法。 建造者模式就可以解决这两...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/compute/design-pattern/04-builder.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"建造者模式"}],["meta",{"property":"og:description","content":"用途 当一个类的构造函数参数比较多，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。 折叠构造函数模式，ClassA(a) Class(B) Class(A,B) Class(A, B, C); Bean Getter/Setter 方式。 缺点： 第一种需要去确认构造方法。 第二种使用者需要调用一堆Set方法。 建造者模式就可以解决这两..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T05:59:53.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"构建模式"}],["meta",{"property":"article:modified_time","content":"2024-04-12T05:59:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"建造者模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T05:59:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":3,"title":"用途","slug":"用途","link":"#用途","children":[]}],"git":{"createdTime":1712829992000,"updatedTime":1712901593000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":2}]},"readingTime":{"minutes":0.88,"words":263},"filePathRelative":"blog/compute/design-pattern/04-builder.md","localizedDate":"2024年4月11日","autoDesc":true}');export{k as comp,d as data};
