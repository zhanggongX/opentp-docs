import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,a as n,f as a,b as e,e as c}from"./app-B868GSZd.js";const i={},r=c(`<h3 id="数据库三大范式" tabindex="-1"><a class="header-anchor" href="#数据库三大范式"><span>数据库三大范式</span></a></h3><p>1NF 第一范式：属性不可再分，确保每列的数据原子性。<br> 2NF 第二范式：在1NF基础上，确保表中的列都和主键相关，非主属性必须完全依赖于主键，主要意思是一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中，例如主订单表，就只放主订单数据。商品相关放订单商品表或者叫自订单表中，如果都放在主订单表中，主订单表将会有很多重复的无意义的数据。<br> 3NF 第三范式：在2NF基础上，确保每列都和主键列直接相关，而不是间接相关，比如订单表不能存在用户信息，仅添加用户ID即可。</p><blockquote><p>当然实际开发中也会用到反范式的情况，偶尔增加1、2个冗余字段，使得查询效率大大提高。</p></blockquote><h3 id="数据库查询语言" tabindex="-1"><a class="header-anchor" href="#数据库查询语言"><span>数据库查询语言</span></a></h3><h4 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl"><span>DDL：</span></a></h4><p>Data Defainition Language 数据定义语言，主要是建表、改表、删表。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建表：</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_name <span class="token punctuation">(</span>
  id     		<span class="token keyword">int</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
  uid 			<span class="token keyword">int</span>         <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;唯一流水id&#39;</span><span class="token punctuation">,</span>
  name			<span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span>
  create_time	<span class="token keyword">datetime</span>    <span class="token keyword">DEFAULT</span> <span class="token string">&#39;1000-01-01 00:00:00&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  update_time 	<span class="token keyword">timestamp</span>   <span class="token keyword">default</span> <span class="token keyword">current_timestamp</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">current_timestamp</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间(会自动更新，不需要刻意程序更新)&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> uniq_uid <span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> idx_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;新建表注释&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 删表</span>
<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span>

<span class="token comment">-- 改表</span>
<span class="token comment">-- 添加字符串型字段：</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">ADD</span> col_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span> <span class="token keyword">AFTER</span>  had_col_name<span class="token punctuation">;</span>
<span class="token comment">-- 添加整型字段：</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">ADD</span> col_name <span class="token keyword">bigint</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span> <span class="token keyword">AFTER</span>  had_col_name<span class="token punctuation">;</span>
<span class="token comment">-- 添加加多个字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name 
	<span class="token keyword">ADD</span> col_1  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span> <span class="token punctuation">,</span>
	<span class="token keyword">ADD</span> col_2  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span> <span class="token punctuation">;</span>

<span class="token comment">-- 改字段类型</span>
<span class="token comment">-- 主键由int(11)改为bigint(20)</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">MODIFY</span> id <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> AUTO_INCREASEMENT <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 单字段：</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> col_name <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 多字段：</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> col_name <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">,</span> <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> col_name_1 <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 改字段备注</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span>  col_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;改备注&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 改字段默认值</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> col_name <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token number">100</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 调整字段顺序</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> col_name <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token number">100</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span> <span class="token keyword">after</span> other_col_name<span class="token punctuation">;</span>
<span class="token comment">-- 改字段名称</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name CHANGE col_name new_col_name <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 加普通索引</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_col_col2 <span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> col_name_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 加唯一索引</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> uniq_name <span class="token punctuation">(</span>col_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 改表备注</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;表备注&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 修改表自增值【必须比实际存储自增字段的最大值大】</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">auto_increment</span><span class="token operator">=</span>xxx<span class="token punctuation">;</span>
<span class="token comment">-- 改变表所有的字符列的字符集到一个新的字符集(示例为改为utf8mb4)</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> tab_name <span class="token keyword">convert</span> <span class="token keyword">to</span> <span class="token keyword">character</span> <span class="token keyword">set</span> utf8mb4<span class="token punctuation">;</span>

<span class="token comment">-- 删字段</span>
<span class="token comment">-- 删一个字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> col_name<span class="token punctuation">;</span>
<span class="token comment">-- 删多个字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> col_nam1<span class="token punctuation">,</span> <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> col_nam2<span class="token punctuation">;</span>
<span class="token comment">-- 删除索引</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tab_name <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> uniq_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dml" tabindex="-1"><a class="header-anchor" href="#dml"><span>DML</span></a></h4><p>Data manipulation Language 数据库控制语言</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- insert</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_name <span class="token punctuation">(</span>col_name1<span class="token punctuation">,</span> col_name2<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;bb&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;cc&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- insert update </span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> table_name <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">on</span> <span class="token keyword">duplicate</span> <span class="token keyword">key</span> <span class="token keyword">update</span> col1 <span class="token operator">=</span> <span class="token keyword">values</span><span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">,</span> col2 <span class="token operator">=</span> <span class="token keyword">values</span><span class="token punctuation">(</span>col2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">update</span> table_name <span class="token keyword">set</span> col_name <span class="token operator">=</span> <span class="token string">&#39;aa&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> xx<span class="token punctuation">;</span>
<span class="token keyword">delete</span> table_name <span class="token keyword">where</span> id <span class="token operator">=</span> xx<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dql" tabindex="-1"><a class="header-anchor" href="#dql"><span>DQL</span></a></h4><p>Date Query Language 数据库查询语言</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token keyword">from</span> table_name <span class="token keyword">where</span> id <span class="token operator">=</span> xx<span class="token punctuation">;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> 
<span class="token keyword">having</span> 
<span class="token keyword">order</span> <span class="token keyword">by</span> 
<span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>where 和 having 的区别 where 用于过滤，过滤后的数据才能参加聚合函数。即 where 在 group by 之前。 having 过滤分组，一般和 group by 配合使用，having 用来过滤分组后的数据。</p></blockquote><h4 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl"><span>DCL</span></a></h4><p>Data Control Language 数据控制语句(dba 使用)</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 分配权限给用户</span>
grate 
<span class="token comment">-- 删除权限</span>
<span class="token keyword">revoke</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="drop、truncate、delete" tabindex="-1"><a class="header-anchor" href="#drop、truncate、delete"><span>drop、truncate、delete</span></a></h3><p>delete 删除数据会产生 binlog 日志，当然就可以恢复数据。<br> drop 直接删除表。<br> truncate 相当于删除表然后重建表，不产生数据日志。</p><h3 id="char-和-varchar" tabindex="-1"><a class="header-anchor" href="#char-和-varchar"><span>char 和 varchar</span></a></h3><ol><li>char 是定长字符串，用来存储电话号，身份证号等长度一致的字符串。</li><li>varchar 是变长字符串，用来存储姓名，标题等内容。</li><li>char 如果存入的内容长度不到定义长度，会在右边填充空格，但是搜索时会去掉空格。</li><li>varchar 存储时需要一个或两个额外<strong>字节</strong>记录字符串的长度，搜索时不需要处理。</li><li>varchar 并不是设置的越大越好，请设置合理的长度，因为它虽然是变长的，设置的较大时不会占用资盘空间，但是搜索时 varchar 在内存中通常分配设置的大小的内存快来保存，例如排序时 varchar 就是按照设置的长度进行的，所以要设置合理的长度。</li></ol><h3 id="mysql-不建议存储-text-和-blob" tabindex="-1"><a class="header-anchor" href="#mysql-不建议存储-text-和-blob"><span>mysql 不建议存储 TEXT 和 BLOB</span></a></h3><p>TEXT 类型类似于 CHAR（0-255 字节）和 VARCHAR（0-65,535 字节），但可以存储更长的字符串，即长文本数据。<br> TINYTEXT(0-255) / TEXT(0-65535) / MEDIUMTEXT(0-16MB) / LONGTEXT(0-4GB)</p><p>为什么不建议使用：</p><ol><li>不能有默认值</li><li>无法使用内存临时表</li><li>只能使用前缀索引</li><li>消耗大量网络IO</li><li>DML 可能变慢</li></ol><p>并不是不允许存储这两种内容的字段，如果真的需要可以单独建表存储，如果内容过大，还是建议使用对象存储。</p><h3 id="为什么不建议使用-null" tabindex="-1"><a class="header-anchor" href="#为什么不建议使用-null"><span>为什么不建议使用 NULL</span></a></h3><ol><li>不能使用 = 判断，只能使用 is NULL \\ is not NULL</li><li>值不确定 select NULL = NULL 结果为 false;</li><li>聚合函数会忽略 NULL</li><li>Count 函数如果 count(*) 会统计到 NULL 的行，如果 count(列) 则统计不到 NULL 的行，导致结果不一致。</li><li>&#39;&#39; 不占用空间， NULL 反而占用空间。</li></ol><h3 id="mysql-sql-执行过程" tabindex="-1"><a class="header-anchor" href="#mysql-sql-执行过程"><span>Mysql SQL 执行过程</span></a></h3><p>连接器 -&gt; (缓存) -&gt; 分析器 -&gt; 优化器 -&gt; 执行器 -&gt; 存储引擎。</p><ul><li>连接器 链接权限认证</li><li>缓存 8.0 已弃用，建议关闭</li><li>分析器 sql 解析</li><li>优化器 sql 解析后生成最优执行方案</li><li>插件式存储引擎 数据的存储和读取</li></ul><blockquote><p>为什么缓存要弃用，</p><ol><li>两次查询任何一点变化都会导致缓存不命中。</li><li>查询中包含任何用户自定义函数，存储函数，用户变量，临时表，系统表，都不会缓存。</li><li>相关的表的任何变动，相关的表的缓存都会失效.</li></ol></blockquote><h3 id="mysql-存储引擎" tabindex="-1"><a class="header-anchor" href="#mysql-存储引擎"><span>Mysql 存储引擎</span></a></h3><p>5.5 之前默认是 MyISAM 5.5 之后是 InnoDB。现在几乎都是使用 InnoDB 两者的区别：</p><ol><li>是否支持事务。</li><li>是否支持表锁。</li><li>是否支持外键。</li><li>是否支持 MVCC。</li><li>是否支持数据恢复。</li></ol><p>毫无疑问：上边几种 InnoDB 支持 MyISAM 都不支持。</p><h3 id="mysql-事务" tabindex="-1"><a class="header-anchor" href="#mysql-事务"><span>Mysql 事务</span></a></h3><h4 id="事务即-acid" tabindex="-1"><a class="header-anchor" href="#事务即-acid"><span>事务即 ACID</span></a></h4><ol><li>原子性（Atomicity)</li><li>一致性（Consistency)</li><li>隔离性（Isolation)</li><li>持久性（Durabiltiy) 其实 AID -&gt; C</li></ol><h4 id="事务并发的问题" tabindex="-1"><a class="header-anchor" href="#事务并发的问题"><span>事务并发的问题</span></a></h4><ol><li>脏读，一个事务读到了另一个事物未提交的数据。</li><li>修饰修改，两个事务并发执行，后提交的事务覆盖了前提交的事务的结果。</li><li>不可重复读，一个事务读取数据，读取到的两次数据不一致。</li><li>幻读，一个事务读取数据，读取到的两次数据条数不一致。</li></ol><blockquote><p>其实解决事务并发问题就两种:</p><ul><li>锁</li><li>MVCC</li></ul></blockquote><h3 id="mysql-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#mysql-事务隔离级别"><span>Mysql 事务隔离级别</span></a></h3><ul><li>read-uncommited 读未提交</li><li>read-commited 读已提交 （解决脏读问题）</li><li>repeateble-read 可重复读 （解决脏读、不可重复读）</li><li>serializable 串行化 （解决所有事务并发问题）</li></ul><h3 id="mysql-的锁" tabindex="-1"><a class="header-anchor" href="#mysql-的锁"><span>Mysql 的锁</span></a></h3><h4 id="mysql的锁按照控制方式分为-共享锁-s-和-排他锁-x-。" tabindex="-1"><a class="header-anchor" href="#mysql的锁按照控制方式分为-共享锁-s-和-排他锁-x-。"><span>Mysql的锁按照控制方式分为 <strong>共享锁（S）</strong> 和 <strong>排他锁（X）</strong>。</span></a></h4><ol><li>共享锁： 读锁，允许事务读取记录时获取共享锁，允许多个事务同时获取。</li><li>排他锁： 写锁/独占锁，事务独占。</li></ol><blockquote><p>普通 select 不会加任何锁，<br> select .. for share -- 加共享锁<br> select .. for update -- 加排他锁<br> 表级锁和行级锁，都支持共享锁和排他锁。</p></blockquote><h4 id="按照锁的粒度-mysql的锁又分为-表级锁-和-行级锁。" tabindex="-1"><a class="header-anchor" href="#按照锁的粒度-mysql的锁又分为-表级锁-和-行级锁。"><span>按照锁的粒度，Mysql的锁又分为 <strong>表级锁</strong> 和 <strong>行级锁</strong>。</span></a></h4><p>行级锁又分为：</p><ul><li>记录锁(record lock)，仅锁单行记录</li><li>间隙锁（gap lock)，锁定一个范围，不包括记录本身</li><li>临键锁（next-key lock), 记录锁+间隙锁，锁定一个范围，包含记录本书，主要是为了解决 RR 事务隔离级别下幻读的问题。</li></ul><blockquote><p>RR 事务隔离级别默认使用 Next-key lock 但是操作的索引是唯一索引或者主键，InnoBD 会把 Next-key lock 降级成 Record lock。</p></blockquote><h4 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁"><span>意向锁</span></a></h4><p>意向锁只有表锁，它的用途就是为了快速判断是否可以加表锁。意向锁是 Mysql 控制的，我们写程序无法控制。</p><blockquote><p>例如某个事务需要加表锁，但是它去判断某个行是否有行锁，效率就特别低，所以 Mysql 增加了意向锁。<br> 我们需要给数据库某些行增加锁，要先获得相应的意向锁，这样事务再去加表锁的时候，只需要判断意向锁即可。</p></blockquote><h3 id="mvcc-多版本并发控制" tabindex="-1"><a class="header-anchor" href="#mvcc-多版本并发控制"><span>MVCC 多版本并发控制</span></a></h3><p>一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。<br> 通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的。<br> MVCC 在 MySQL 中实现所依赖的手段主要是:</p><ul><li>隐藏字段（TXID）</li><li>read view</li><li>undo log</li></ul><p>undo log : undo log 用于记录某行数据的多个版本的数据。<br> read view 和 隐藏字段 : 用来判断当前版本数据的可见性。</p><h3 id="当前读和快照读" tabindex="-1"><a class="header-anchor" href="#当前读和快照读"><span>当前读和快照读</span></a></h3><h3 id="explain" tabindex="-1"><a class="header-anchor" href="#explain"><span>explain</span></a></h3><h3 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表"><span>分库分表</span></a></h3><h3 id="深度分页" tabindex="-1"><a class="header-anchor" href="#深度分页"><span>深度分页</span></a></h3><h3 id="冷热数据" tabindex="-1"><a class="header-anchor" href="#冷热数据"><span>冷热数据</span></a></h3><h3 id="数据库优化" tabindex="-1"><a class="header-anchor" href="#数据库优化"><span>数据库优化</span></a></h3><h3 id="收藏夹" tabindex="-1"><a class="header-anchor" href="#收藏夹"><span>收藏夹</span></a></h3>`,66),k={href:"https://zhuanlan.zhihu.com/p/113917726",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),u={href:"https://segmentfault.com/a/1190000040129107",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),y={href:"https://juejin.cn/post/7161964571853815822",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),b={href:"https://relph1119.github.io/mysql-learning-notes/#/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7094049650428084232",target:"_blank",rel:"noopener noreferrer"};function w(g,L){const s=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",k,[a("深入理解 Mysql 索引底层原理"),e(s)]),d,n("a",u,[a("next-key锁定范围"),e(s)]),m,n("a",y,[a("索引之道"),e(s)]),h,n("a",b,[a("MySQL 是怎样运行的：从根儿上理解 MySQL"),e(s)]),n("a",v,[a("两万字详解InnoDB的锁"),e(s)])])])}const E=l(i,[["render",w],["__file","mysql.html.vue"]]),q=JSON.parse('{"path":"/blog/database/mysql.html","title":"Mysql","lang":"zh-CN","frontmatter":{"title":"Mysql","category":["数据库"],"order":1,"tag":["数据库","mysql"],"description":"数据库三大范式 1NF 第一范式：属性不可再分，确保每列的数据原子性。 2NF 第二范式：在1NF基础上，确保表中的列都和主键相关，非主属性必须完全依赖于主键，主要意思是一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中，例如主订单表，就只放主订单数据。商品相关放订单商品表或者叫自订单表中，如果都放在主订单表中，主订单表将会有很多重复的无...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/database/mysql.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"Mysql"}],["meta",{"property":"og:description","content":"数据库三大范式 1NF 第一范式：属性不可再分，确保每列的数据原子性。 2NF 第二范式：在1NF基础上，确保表中的列都和主键相关，非主属性必须完全依赖于主键，主要意思是一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中，例如主订单表，就只放主订单数据。商品相关放订单商品表或者叫自订单表中，如果都放在主订单表中，主订单表将会有很多重复的无..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T10:07:36.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:modified_time","content":"2024-04-12T10:07:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mysql\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T10:07:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":3,"title":"数据库三大范式","slug":"数据库三大范式","link":"#数据库三大范式","children":[]},{"level":3,"title":"数据库查询语言","slug":"数据库查询语言","link":"#数据库查询语言","children":[]},{"level":3,"title":"drop、truncate、delete","slug":"drop、truncate、delete","link":"#drop、truncate、delete","children":[]},{"level":3,"title":"char 和 varchar","slug":"char-和-varchar","link":"#char-和-varchar","children":[]},{"level":3,"title":"mysql 不建议存储 TEXT 和 BLOB","slug":"mysql-不建议存储-text-和-blob","link":"#mysql-不建议存储-text-和-blob","children":[]},{"level":3,"title":"为什么不建议使用 NULL","slug":"为什么不建议使用-null","link":"#为什么不建议使用-null","children":[]},{"level":3,"title":"Mysql SQL 执行过程","slug":"mysql-sql-执行过程","link":"#mysql-sql-执行过程","children":[]},{"level":3,"title":"Mysql 存储引擎","slug":"mysql-存储引擎","link":"#mysql-存储引擎","children":[]},{"level":3,"title":"Mysql 事务","slug":"mysql-事务","link":"#mysql-事务","children":[]},{"level":3,"title":"Mysql 事务隔离级别","slug":"mysql-事务隔离级别","link":"#mysql-事务隔离级别","children":[]},{"level":3,"title":"Mysql 的锁","slug":"mysql-的锁","link":"#mysql-的锁","children":[]},{"level":3,"title":"MVCC 多版本并发控制","slug":"mvcc-多版本并发控制","link":"#mvcc-多版本并发控制","children":[]},{"level":3,"title":"当前读和快照读","slug":"当前读和快照读","link":"#当前读和快照读","children":[]},{"level":3,"title":"explain","slug":"explain","link":"#explain","children":[]},{"level":3,"title":"分库分表","slug":"分库分表","link":"#分库分表","children":[]},{"level":3,"title":"深度分页","slug":"深度分页","link":"#深度分页","children":[]},{"level":3,"title":"冷热数据","slug":"冷热数据","link":"#冷热数据","children":[]},{"level":3,"title":"数据库优化","slug":"数据库优化","link":"#数据库优化","children":[]},{"level":3,"title":"收藏夹","slug":"收藏夹","link":"#收藏夹","children":[]}],"git":{"createdTime":1712647783000,"updatedTime":1712916456000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":3}]},"readingTime":{"minutes":8.26,"words":2478},"filePathRelative":"blog/database/mysql.md","localizedDate":"2024年4月9日","autoDesc":true}');export{E as comp,q as data};
