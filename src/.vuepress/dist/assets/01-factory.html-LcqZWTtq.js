import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-KtaEACfe.js";const e="/assets/factory-c3iK7AjG.png",p={},c=t('<h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h2><h3 id="uml" tabindex="-1"><a class="header-anchor" href="#uml"><span>UML</span></a></h3><figure><img src="'+e+`" alt="工厂模式UML" tabindex="0" loading="lazy"><figcaption>工厂模式UML</figcaption></figure><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 实现类A</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token keyword">implements</span> <span class="token class-name">Inter</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this is class A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 实现类B</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token keyword">implements</span> <span class="token class-name">Inter</span><span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this is class B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 工厂类</span>
<span class="token comment">// 如果使用 Spring 可以直接通过 Spring 上下文 getBean 获取对象。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Inter</span> <span class="token function">getInter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;classA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;classB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClassB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用工厂模式。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Factory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Inter</span> classA <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInter</span><span class="token punctuation">(</span><span class="token string">&quot;classA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Inter</span> classB <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInter</span><span class="token punctuation">(</span><span class="token string">&quot;classB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        classA<span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        classB<span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><p>首先符合开闭原则，ClassA 和 ClassB 进行了封装，如果以后增加 ClassC, 对 ClassA 和 ClassB 是完全无影响的。<br> 对比所有的创建对象逻辑都在 Test 里实现，业务代码无需关心对象是怎么创建的，只需要把想要的对象名传给工厂类即可。</p><h3 id="略势" tabindex="-1"><a class="header-anchor" href="#略势"><span>略势</span></a></h3><p>缺点就是增加了实现，需要在工厂类进行修改。所以复杂的对象创建建议使用工厂模式。</p>`,13),o=[c];function l(i,u){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","01-factory.html.vue"]]),m=JSON.parse('{"path":"/blog/compute/design-pattern/01-factory.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","category":["设计模式"],"order":1,"tag":["设计模式","工厂模式"],"description":"工厂模式 UML 工厂模式UML工厂模式UML 代码实现 优势 首先符合开闭原则，ClassA 和 ClassB 进行了封装，如果以后增加 ClassC, 对 ClassA 和 ClassB 是完全无影响的。 对比所有的创建对象逻辑都在 Test 里实现，业务代码无需关心对象是怎么创建的，只需要把想要的对象名传给工厂类即可。 略势 缺点就是增加了实现，...","head":[["meta",{"property":"og:url","content":"https://opentp.cn/blog/compute/design-pattern/01-factory.html"}],["meta",{"property":"og:site_name","content":"opentp"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"工厂模式 UML 工厂模式UML工厂模式UML 代码实现 优势 首先符合开闭原则，ClassA 和 ClassB 进行了封装，如果以后增加 ClassC, 对 ClassA 和 ClassB 是完全无影响的。 对比所有的创建对象逻辑都在 Test 里实现，业务代码无需关心对象是怎么创建的，只需要把想要的对象名传给工厂类即可。 略势 缺点就是增加了实现，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-11T10:06:32.000Z"}],["meta",{"property":"article:author","content":"zhanggong"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:tag","content":"工厂模式"}],["meta",{"property":"article:modified_time","content":"2024-04-11T10:06:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-11T10:06:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhanggong\\",\\"url\\":\\"opentp.cn\\"}]}"]]},"headers":[{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[{"level":3,"title":"UML","slug":"uml","link":"#uml","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":3,"title":"优势","slug":"优势","link":"#优势","children":[]},{"level":3,"title":"略势","slug":"略势","link":"#略势","children":[]}]}],"git":{"createdTime":1712750769000,"updatedTime":1712829992000,"contributors":[{"name":"zhanggong","email":"zhanggong@58.com","commits":2}]},"readingTime":{"minutes":0.98,"words":295},"filePathRelative":"blog/compute/design-pattern/01-factory.md","localizedDate":"2024年4月10日","autoDesc":true}');export{k as comp,m as data};
